package main

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"os/user"
	"runtime"
	"strings"
)

// Info represents the user and OS information.
type Info struct {
	OsName    string `json:"os_name"`
	OSVersion string `json:"os_ver"`
	HostIP    string `json:"host_ip"`
	UserName  string `json:"user_name"`
}

func getOSVersion() string {
	var cmd *exec.Cmd

	switch runtime.GOOS {
	case "windows":
		cmd = exec.Command("cmd", "/C", "ver")
	case "darwin":
		cmd = exec.Command("sw_vers", "-productVersion")
	case "linux":
		cmd = exec.Command("lsb_release", "-d")
	default:
		return "Unknown OS"
	}

	output, err := cmd.Output()
	if err != nil {
		log.Fatalf("Failed to execute command: %v", err)
	}

	version := strings.TrimSpace(string(output))
	if runtime.GOOS == "linux" {
		parts := strings.Split(version, "\t")
		if len(parts) > 1 {
			version = parts[1]
		}
	}

	return version
}

func getHostIP() string {
	addrs, err := os.Hostname()
	if err != nil {
		log.Fatalf("Failed to get host IP: %v", err)
	}
	return addrs
}

func main() {
	// Suppress all log output
	log.SetOutput(ioutil.Discard)

	// Get current user
	currentUser, err := user.Current()
	if err != nil {
		log.Fatalf("Failed to get current user: %v", err)
	}

	// Get OS name and version
	osName := runtime.GOOS
	osVersion := getOSVersion()

	// Get Host IP
	hostIP := getHostIP()

	// Create an Info object
	info := Info{
		UserName:  currentUser.Username,
		OsName:    osName,
		OSVersion: osVersion,
		HostIP:    hostIP,
	}

	// Marshal the Info object into JSON
	jsonData, err := json.Marshal(info)
	if err != nil {
		log.Fatalf("Failed to marshal JSON: %v", err)
	}

	// Send a POST request
	resp, err := http.Post("http://0.0.0.0:8080", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		log.Fatalf("Failed to send POST request: %v", err)
	}
	defer resp.Body.Close()

	log.Println("POST request sent successfully")
}
